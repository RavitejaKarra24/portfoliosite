name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Convert repository name to lowercase
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
  DIGITAL_OCEAN_HOST: ${{ secrets.DIGITAL_OCEAN_HOST }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Build application
        run: npm run build
        
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Convert to lowercase
        run: |
          echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.REPO_NAME }}:${{ github.sha }},ghcr.io/${{ env.REPO_NAME }}:latest
          
  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          
      - name: Deploy to Digital Ocean
        run: |
          ssh root@${{ env.DIGITAL_OCEAN_HOST }} << 'ENDSSH'
            # Pull latest image
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            
            # Stop existing container
            docker stop next-app || true
            docker rm next-app || true
            
            # Run new container
            docker run -d \
              --name next-app \
              --restart unless-stopped \
              -p 3000:3000 \
              ${{ env.DOCKER_IMAGE }}:latest
          ENDSSH